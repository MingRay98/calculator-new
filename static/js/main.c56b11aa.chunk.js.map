{"version":3,"sources":["App.js","component/DisplayBlock.js","component/Buttons.js","serviceWorker.js","index.js"],"names":["App","props","handleBtnClick","input","target","innerHTML","handleDelete","handleCalculate","handleClear","sum","eval","state","displaytext","setState","displaytext2","alert","handleSymbolInput","toString","slice","length","Number","parseFloat","toFixed","document","querySelectorAll","forEach","btn","addEventListener","alignContent","className","this","React","Component","DisplayBlock","class","style","height","width","margin","border","background","color","fontSize","justifyContent","Buttons","operationColorStyle","emitter","backgroundColor","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c56b11aa.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport DisplayBlock from './component/DisplayBlock'\r\nimport Buttons from './component/Buttons'\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      displaytext: '0',\r\n      displaytext2: '0',\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const btn = document.querySelectorAll(\"button\");\r\n    btn.forEach((btn) => {\r\n      btn.addEventListener(\"click\", this.handleBtnClick);\r\n    })\r\n  }\r\n\r\n  handleBtnClick = (input) => {\r\n    input = input.target.innerHTML;\r\n    switch (input) {\r\n      case '←':\r\n        this.handleDelete();\r\n        break;\r\n      case '=':\r\n        this.handleCalculate();\r\n        break;\r\n      case 'C':\r\n        this.handleClear();\r\n        break;\r\n      case '%':\r\n        let sum = (eval(this.state.displaytext)) / 100;\r\n        this.setState({ displaytext2: sum })\r\n        break;\r\n      case '☰':\r\n        alert('Hello world!')\r\n        break;\r\n      default:\r\n        this.handleSymbolInput(input);\r\n        break;\r\n    }\r\n  }\r\n\r\n  handleSymbolInput = (input) => {\r\n    const displaytext = this.state.displaytext;\r\n    if (displaytext === '0')\r\n      this.setState({ displaytext: input })\r\n    else\r\n      this.setState({ displaytext: displaytext + input })\r\n  }\r\n\r\n  handleDelete = () => {\r\n    this.setState({ displaytext2: '0' })\r\n    let displaytext = this.state.displaytext;\r\n    displaytext = displaytext.toString().slice(0, -1);\r\n    displaytext.toString().length < 1 ?\r\n      this.setState({ displaytext: '0' }) :\r\n      this.setState({ displaytext: displaytext })\r\n\r\n  }\r\n\r\n  handleClear = () => {\r\n    this.setState({ displaytext: '0' })\r\n    this.setState({ displaytext2: '0' })\r\n  }\r\n\r\n  handleCalculate = () => {\r\n    let sum = eval(this.state.displaytext.toString());\r\n    sum = Number(parseFloat(sum).toFixed(10));\r\n    this.setState({ displaytext2: sum.toString() })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div alignContent=\"center\">\r\n        <div className='FirstContainer' >\r\n          <DisplayBlock displaytext={this.state.displaytext} displaytext2={this.state.displaytext2} />\r\n          <Buttons />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from 'react';\r\n\r\n\r\nclass DisplayBlock extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n  render() {\r\n    return (\r\n      <div class=\"display\" >\r\n        <div style={{ height: \"2.5rem\", width: \"30rem\", margin: '0px 0px 0px 1rem' }}>\r\n          <button style={{ border: 'none', background: 'transparent', color: 'white', fontSize: \"2.5rem\" }}>☰</button>\r\n        </div>\r\n        <div style={{ height: \"2.5rem\", width: \"30rem\", fontSize: \"2.5rem\", justifyContent: 'flex-end', margin: '0px 1rem 0px 0px' }}>\r\n          {this.props.displaytext}\r\n        </div>\r\n        <div style={{ height: \"4.7rem\", width: \"30rem\", justifyContent: 'flex-end', margin: '0px 1rem 0px 0px', fontSize: \"4.5rem\" }}>\r\n          {this.props.displaytext2}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DisplayBlock;","import React, { Component } from 'react';\r\n\r\nclass Buttons extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  operationColorStyle = {\r\n    background: \"rgb(255,200,105)\",\r\n    background: \"linear-gradient(180deg, rgba(255,143,62,1) 22%, rgba(255,125,33,1) 60%, rgba(255,107,0,1) 100%)\"\r\n  }\r\n\r\n  render() {\r\n    let em = this.props.emitter;\r\n    const emClick = (e) => { em.emitEvent('handleNumClick', [e.target.value]) };\r\n    const emCalculate = () => em.emitEvent('handleCalculate');\r\n    const emClear = () => em.emitEvent('handleClear');\r\n    const emDelete = () => em.emitEvent('handleDelete');\r\n\r\n    return (\r\n      <div style={{ height: '30rem' }}>\r\n        <div class='BtnColumn'>\r\n          <button class=\"Btn\" style={{ backgroundColor: 'white', color: 'red' }}>C</button>\r\n          <button class=\"Btn\">1</button>\r\n          <button class=\"Btn\">4</button>\r\n          <button class=\"Btn\">7</button>\r\n          <button class=\"Btn\" style={{ background: 'rgba(150, 117, 117, 0.377)' }}>←</button>\r\n        </div>\r\n        <div class='BtnColumn'>\r\n          <button class=\"Btn\" style={this.operationColorStyle}>%</button>\r\n          <button class=\"Btn\">2</button>\r\n          <button class=\"Btn\">5</button>\r\n          <button class=\"Btn\">8</button>\r\n          <button class=\"Btn\">0</button>\r\n        </div>\r\n        <div class='BtnColumn'>\r\n          <button class=\"Btn\" style={this.operationColorStyle}>/</button>\r\n          <button class=\"Btn\">3</button>\r\n          <button class=\"Btn\">6</button>\r\n          <button class=\"Btn\">9</button>\r\n          <button class=\"Btn\">.</button>\r\n        </div>\r\n        <div class='BtnColumn'>\r\n          <button class=\"Btn\" style={this.operationColorStyle}>*</button>\r\n          <button class=\"Btn\" style={this.operationColorStyle}>+</button>\r\n          <button class=\"Btn\" style={this.operationColorStyle}>-</button>\r\n          <button class=\"Btn BigEnter\">=</button>\r\n        </div>\r\n      </div>\r\n\r\n      // <div >\r\n      //   <div className='OperationTopBtn' >\r\n      //     <button className='Btn' onClick={emClear} style={{ borderRadius: '5rem', backgroundColor: 'white', color: 'red' }}>C</button>\r\n      //     <button className='Btn' onClick={emClick} value='%' style={this.operationColorStyle}>%</button>\r\n      //     <button className='Btn' onClick={emClick} value='/' style={this.operationColorStyle}>/</button>\r\n      //     <button className='Btn' onClick={emClick} value='*' style={this.operationColorStyle}>X</button>\r\n      //   </div>\r\n      //   <div className='SecondContainer' >\r\n      //     <div className='NumBtnDiv'>\r\n      //       <div className='NumBtnInColumn'>\r\n      //         <button className='Btn' onClick={emClick} value='1'>1</button>\r\n      //         <button className='Btn' onClick={emClick} value='2'>2</button>\r\n      //         <button className='Btn' onClick={emClick} value='3'>3</button>\r\n      //       </div>\r\n\r\n      //       <div className='NumBtnInColumn'>\r\n      //         <button className='Btn' onClick={emClick} value='4'>4</button>\r\n      //         <button className='Btn' onClick={emClick} value='5'>5</button>\r\n      //         <button className='Btn' onClick={emClick} value='6'>6</button>\r\n      //       </div>\r\n\r\n      //       <div className='NumBtnInColumn'>\r\n      //         <button className='Btn' onClick={emClick} value='7'>7</button>\r\n      //         <button className='Btn' onClick={emClick} value='8'>8</button>\r\n      //         <button className='Btn' onClick={emClick} value='9'>9</button>\r\n      //       </div>\r\n\r\n      //       <div className='NumBtnInColumn' >\r\n      //         <button onClick={emDelete} className='Btn' style={{ backgroundColor: 'rgb(52, 56, 106)' ,borderRadius:'5rem'}} >←</button>\r\n      //         <button onClick={emClick} className='Btn' value='0'>0</button>\r\n      //         <button onClick={emClick} className='Btn' value='.'>．</button>\r\n      //       </div>\r\n\r\n      //     </div>\r\n      //     <div className='OperationRigthBtn'>\r\n      //       <div className='OperationRigthBtnPM'>\r\n      //         <button className='Btn' onClick={emClick} value='+' style={this.operationColorStyle} >+</button>\r\n      //         <button className='Btn' onClick={emClick} value='-' style={this.operationColorStyle} >-</button>\r\n      //       </div>\r\n      //       <button className='BigEnter' onClick={emCalculate} >=</button>\r\n      //     </div>\r\n      //   </div>\r\n      //   </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default Buttons;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}