{"version":3,"sources":["App.js","component/DisplayBlock.js","component/Buttons.js","serviceWorker.js","index.js"],"names":["emitter","eventemitter","lastChar","App","props","handleInput","input","displaytext","state","lastTwoChar","toString","slice","length","handleAlert","isNaN","eval","setState","e","sum","Number","parseFloat","toFixed","history","push","displaytext2","dt","substring","handleDelete","charAt","handleClear","handleCalculate","message","warn","document","getElementById","className","innerHTML","setTimeout","handleHistroy","limit","arrayHistory","historyBtn","forEach","item","key","handleCloseHistory","addListener","this","alignContent","id","onClick","React","Component","DisplayBlock","style","fontSize","width","height","justifyContent","overflow","Buttons","operationColorStyle","background","em","emClick","emitEvent","emCalculate","emClear","emDelete","handleBtnClick","target","querySelectorAll","btn","addEventListener","backgroundColor","color","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e661a968.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport DisplayBlock from './component/DisplayBlock'\r\nimport Buttons from './component/Buttons'\r\nimport eventemitter from 'wolfy87-eventemitter'\r\n\r\nlet emitter = new eventemitter();\r\nlet lastChar = ''\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      displaytext: '0',\r\n      displaytext2: '0',\r\n    };\r\n    this.history = []\r\n  }\r\n\r\n  componentDidMount() {\r\n    emitter.addListener('handleInput', this.handleInput);\r\n    emitter.addListener('handleCalculate', this.handleCalculate);\r\n    emitter.addListener('handleClear', this.handleClear);\r\n    emitter.addListener('handleDelete', this.handleDelete);\r\n  }\r\n\r\n  handleInput = (input) => {\r\n    const displaytext = this.state.displaytext;\r\n    const lastTwoChar = displaytext.toString().slice(displaytext.length - 2, displaytext.length - 1);\r\n    //input too many input\r\n    if (displaytext.length > 12)\r\n      return this.handleAlert('Error:Input too much')\r\n\r\n    //If input is symbol \r\n    if (isNaN(input)) {\r\n      if (isNaN(lastChar))\r\n        return this.handleAlert('Error:Double symbol');\r\n      if (input === '.') {\r\n        try {\r\n          isNaN(eval(displaytext + \".\"))\r\n          this.setState({ displaytext: displaytext + '.' });\r\n        }\r\n        catch (e) {\r\n          return this.handleAlert('Error:Double dot');\r\n        }\r\n      }\r\n      if (input === '%') {\r\n        let sum = eval(displaytext) / 100\r\n        sum = Number(parseFloat(sum).toFixed(10));\r\n        this.history.push(this.state.displaytext + \" % = \" + sum)\r\n        return (this.setState({ displaytext2: sum })\r\n          , this.setState({ displaytext: '0' })\r\n        )\r\n      }\r\n      //let calculator can input negative number\r\n      if (input === '-' && displaytext === '0')\r\n        this.setState({ displaytext: input });\r\n      else\r\n        this.setState({ displaytext: displaytext + input });\r\n      lastChar = input;\r\n      return\r\n    }\r\n    //input Num\r\n    if (displaytext === '0')\r\n      this.setState({ displaytext: input })\r\n    //DeBug for zero after operation \r\n    else if (isNaN(lastTwoChar) && lastTwoChar !== '.' && lastChar === '0') {\r\n      let dt = displaytext.substring(0, displaytext.length - 1) + input\r\n      this.setState({ displaytext: dt })\r\n      return lastChar = input\r\n    } else\r\n      this.setState({ displaytext: displaytext + input })\r\n    lastChar = input;\r\n  }\r\n\r\n  handleDelete = () => {\r\n    this.setState({ displaytext2: '0' })\r\n    let displaytext = this.state.displaytext;\r\n    // if display is Null show 0\r\n    displaytext = displaytext.toString().slice(0, -1);\r\n    displaytext.toString().length < 1 ?\r\n      this.setState({ displaytext: '0' }) :\r\n      this.setState({ displaytext: displaytext })\r\n\r\n    lastChar = displaytext.charAt(displaytext.length - 1);\r\n  }\r\n\r\n  handleClear = () => {\r\n    this.setState({ displaytext: '0' })\r\n    this.setState({ displaytext2: '0' })\r\n    lastChar = '';\r\n  }\r\n\r\n  handleCalculate = () => {\r\n    //handle lastChar is a symbol\r\n    if (isNaN(lastChar))\r\n      return this.handleAlert('Error:Input error')\r\n    let sum = eval(this.state.displaytext.toString());\r\n    //handle 0/0\r\n    if (isNaN(sum))\r\n      return this.handleAlert('Error:Input error')\r\n    sum = Number(parseFloat(sum).toFixed(10));\r\n    this.setState({ displaytext2: sum.toString() })\r\n    this.history.push(this.state.displaytext + \" = \" + sum)\r\n  }\r\n\r\n  handleAlert = (message) => {\r\n    let warn = document.getElementById('alert1');\r\n    warn.className = warn.className + ' active';\r\n    warn.innerHTML = message;\r\n    setTimeout(() => {\r\n      warn.className = 'alert1';\r\n    }, 2000);\r\n  }\r\n\r\n  handleHistroy = () => {\r\n    let limit = 0;\r\n    if (this.history.length - 1 >= 0) {\r\n      let arrayHistory = document.getElementById('history');\r\n      let historyBtn = document.getElementById('historyBtn');\r\n\r\n      arrayHistory.className = arrayHistory.className + ' active';\r\n      historyBtn.className = historyBtn.className + ' active';\r\n\r\n      arrayHistory.innerHTML = \"\";\r\n\r\n      if (this.history.length > 12)\r\n        limit = this.history.length - 12;\r\n      this.history.forEach((item, key) => {\r\n        if (key >= limit)\r\n          arrayHistory.innerHTML += key + 1 + \". \" + item + \"<br>\";\r\n      })\r\n    }\r\n  }\r\n\r\n  handleCloseHistory = () => {\r\n    let arrayHistory = document.getElementById('history');\r\n    let historyBtn = document.getElementById('historyBtn');\r\n    arrayHistory.className = 'history';\r\n    historyBtn.className = 'Btn hisotryBtn';\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div alignContent=\"center\">\r\n        <span id='history' className='history' />\r\n        <button id='historyBtn' className='Btn hisotryBtn' onClick={this.handleCloseHistory}>X</button>\r\n        <span id='alert1' className='alert1' />\r\n        <div className='FirstContainer' >\r\n          <DisplayBlock displaytext={this.state.displaytext} displaytext2={this.state.displaytext2} handleHistroy={this.handleHistroy} />\r\n          <Buttons emitter={emitter} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from 'react';\r\nimport '../App.css';\r\n\r\nclass DisplayBlock extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"Display\" >\r\n        <div className='Display1'>\r\n          <button style={{ fontSize: \"2rem\" , width:'3rem' , height:'3rem'  }} className='Btn' onClick={this.props.handleHistroy}>☰</button>\r\n        </div>\r\n        <div style={{ fontSize: \"2.5rem\", justifyContent: 'flex-end'}} className='Display1' >\r\n          {this.props.displaytext}\r\n        </div>\r\n        <div style={{ justifyContent: 'flex-end' ,overflow: 'hidden'}} className='Display2'>\r\n          {this.props.displaytext2}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DisplayBlock;","import React, { Component } from 'react';\r\nimport '../App.css';\r\n\r\nclass Buttons extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  operationColorStyle = {\r\n    background: \"rgb(255,200,105)\",\r\n    background: \"linear-gradient(180deg, rgba(255,143,62,1) 22%, rgba(255,125,33,1) 60%, rgba(255,107,0,1) 100%)\"\r\n  }\r\n\r\n  componentDidMount() {\r\n    const btn = document.querySelectorAll(\"button\");\r\n    btn.forEach((btn) => {\r\n      btn.addEventListener(\"click\", this.handleBtnClick);\r\n    })\r\n  }\r\n\r\n  em = this.props.emitter;\r\n  emClick = (e) => { this.em.emitEvent('handleInput', [e]) };\r\n  emCalculate = () => this.em.emitEvent('handleCalculate');\r\n  emClear = () => this.em.emitEvent('handleClear');\r\n  emDelete = () => this.em.emitEvent('handleDelete');\r\n\r\n  handleBtnClick = (input) => {\r\n    input = input.target.innerHTML;\r\n    switch (input) {\r\n      case '←':\r\n        this.emDelete();\r\n        break;\r\n      case '=':\r\n        this.emCalculate();\r\n        break;\r\n      case 'C':\r\n        this.emClear();\r\n        break;\r\n      case '☰':\r\n        break;\r\n      case 'X':\r\n        break;\r\n      default:\r\n        this.emClick(input);\r\n        break;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style={{ height: '30rem' }}>\r\n        <div className='BtnColumn'>\r\n          <button className=\"Btn\" style={{ backgroundColor: 'white', color: 'red' }}>C</button>\r\n          <button className=\"Btn\">1</button>\r\n          <button className=\"Btn\">4</button>\r\n          <button className=\"Btn\">7</button>\r\n          <button className=\"Btn\" style={{ background: 'rgba(150, 117, 117, 0.377)' }}>←</button>\r\n        </div>\r\n        <div className='BtnColumn'>\r\n          <button className=\"Btn\" style={this.operationColorStyle}>%</button>\r\n          <button className=\"Btn\">2</button>\r\n          <button className=\"Btn\">5</button>\r\n          <button className=\"Btn\">8</button>\r\n          <button className=\"Btn\">0</button>\r\n        </div>\r\n        <div className='BtnColumn'>\r\n          <button className=\"Btn\" style={this.operationColorStyle}>/</button>\r\n          <button className=\"Btn\">3</button>\r\n          <button className=\"Btn\">6</button>\r\n          <button className=\"Btn\">9</button>\r\n          <button className=\"Btn\">.</button>\r\n        </div>\r\n        <div className='BtnColumn'>\r\n          <button className=\"Btn\" style={this.operationColorStyle}>*</button>\r\n          <button className=\"Btn\" style={this.operationColorStyle}>+</button>\r\n          <button className=\"Btn\" style={this.operationColorStyle}>-</button>\r\n          <button className=\"Btn BigEnter\">=</button>\r\n        </div>\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default Buttons;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}