{"version":3,"sources":["App.js","component/DisplayBlock.js","component/Buttons.js","serviceWorker.js","index.js"],"names":["emitter","eventemitter","lastOperation","lastChar","App","props","handleNumClick","input","displaytext","state","lastTwoChar","toString","slice","length","alert","isNaN","dt","substring","setState","eval","e","sum","Number","parseFloat","toFixed","addNum","minusNum","multiplyNum","divisorNum","handleDelete","charAt","handleClear","handleCalculate","displaytext2","addListener","this","alignContent","className","Component","React","DisplayBlock","class","style","height","width","margin","border","background","color","fontSize","justifyContent","Buttons","operationColorStyle","backgroundColor","opacity","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2be6b6be.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport DisplayBlock from './component/DisplayBlock'\r\nimport Buttons from './component/Buttons'\r\nimport eventemitter from 'wolfy87-eventemitter'\r\n\r\nlet emitter = new eventemitter();\r\nlet lastOperation = ''\r\nlet lastChar = ''\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      displaytext: '0',\r\n      displaytext2: '0',\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    emitter.addListener('handleNumClick', this.handleNumClick);\r\n    emitter.addListener('handleCalculate', this.handleCalculate);\r\n    emitter.addListener('handleClear', this.handleClear);\r\n    emitter.addListener('handleDelete', this.handleDelete);\r\n  }\r\n\r\n  handleNumClick = (input) => {\r\n    const displaytext = this.state.displaytext;\r\n    const lastTwoChar = displaytext.toString().slice(displaytext.length - 2, displaytext.length - 1);\r\n    //input too many input\r\n    if (displaytext.length > 12)\r\n      return alert(\"too much\")\r\n    //DeBug for zero after operation \r\n    if (isNaN(lastTwoChar) && lastTwoChar !== '.' && lastChar === '0' && !isNaN(input)) {\r\n      let dt = displaytext.substring(0, displaytext.length - 1) + input\r\n      this.setState({ displaytext: dt })\r\n      return lastChar = input\r\n    }\r\n    //If input is symbol \r\n    if (isNaN(input)) {\r\n      if (isNaN(lastChar))\r\n        return alert('double symbol');\r\n      if (input === '.') {\r\n        try {\r\n          isNaN(eval(displaytext + \".\"))\r\n        }\r\n        catch (e) {\r\n          return alert('double dot');\r\n        }\r\n      }\r\n      if (input === '%') {\r\n        let sum = eval(displaytext) / 100\r\n        sum = Number(parseFloat(sum).toFixed(10));\r\n        return this.setState({ displaytext: sum })\r\n      }\r\n      else if (lastOperation === '' || input === '.')\r\n        this.setState({ displaytext: displaytext + input });\r\n      else {\r\n        if (lastOperation === '+')\r\n          this.addNum(input);\r\n        if (lastOperation === '-')\r\n          this.minusNum(input);\r\n        if (lastOperation === '*')\r\n          this.multiplyNum(input);\r\n        if (lastOperation === '/')\r\n          this.divisorNum(input);\r\n      }\r\n      if (input !== \".\") lastOperation = input;\r\n    }\r\n    //input Num\r\n    if (!isNaN(input) && displaytext === '0')\r\n      this.setState({ displaytext: input })\r\n    else if (!isNaN(input))\r\n      this.setState({ displaytext: displaytext + input })\r\n\r\n    lastChar = input;\r\n  }\r\n\r\n  handleDelete = () => {\r\n    let displaytext = this.state.displaytext;\r\n    const delteChar = displaytext.charAt(displaytext.length - 1)\r\n\r\n    displaytext = displaytext.toString().slice(0, -1);\r\n    displaytext.toString().length < 1 ?\r\n      this.setState({ displaytext: '0' }) :\r\n      this.setState({ displaytext: displaytext })\r\n\r\n  }\r\n\r\n  handleClear = () => {\r\n    lastOperation = '';\r\n    lastChar = '';\r\n    this.setState({ displaytext: '0' })\r\n  }\r\n\r\n  handleCalculate = () => {\r\n    let sum = eval(this.state.displaytext.toString());\r\n    sum = Number(parseFloat(sum).toFixed(10));\r\n    this.setState({ displaytext: sum.toString() })\r\n    lastOperation = '';\r\n    lastChar = '';\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div alignContent=\"center\">\r\n        <div className='FirstContainer' >\r\n          <DisplayBlock Component={this.state.displaytext} />\r\n          <Buttons emitter={emitter} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from 'react';\r\n\r\n\r\nclass DisplayBlock extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n  render() {\r\n    return (\r\n      <div class=\"display\" >\r\n        <div style={{height:\"2.5rem\",width:\"30rem\" , margin:'0px 0px 0px 1rem'}}>\r\n          <button style={{border:'none',background:'transparent' ,color:'white',fontSize:\"2.5rem\"}}>☰</button>\r\n          </div>\r\n        <div style={{height:\"2.5rem\",width:\"30rem\",fontSize:\"2.5rem\",justifyContent:'flex-end', margin:'0px 1rem 0px 0px'}}>\r\n        40+8.5\r\n          </div>\r\n        <div style={{height:\"4.7rem\",width:\"30rem\",justifyContent:'flex-end',margin:'0px 1rem 0px 0px',fontSize:\"4.5rem\"}}>\r\n          48.5\r\n          </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DisplayBlock;","import React, { Component } from 'react';\r\n\r\nclass Buttons extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  operationColorStyle = {\r\n    backgroundColor: 'rgb(255, 123, 0)'\r\n  }\r\n\r\n  render() {\r\n    let em = this.props.emitter;\r\n    const emClick = (e) => { em.emitEvent('handleNumClick', [e.target.value]) };\r\n    const emCalculate = () => em.emitEvent('handleCalculate');\r\n    const emClear = () => em.emitEvent('handleClear');\r\n    const emDelete = () => em.emitEvent('handleDelete');\r\n\r\n    return (\r\n      <div style={{height:'30rem'}}>\r\n        <div class='BtnColumn'>\r\n          <button class=\"Btn\" style={{backgroundColor:'white', color:'red'}}>C</button>\r\n          <button class=\"Btn\">1</button>\r\n          <button class=\"Btn\">4</button>\r\n          <button class=\"Btn\">7</button>\r\n          <button class=\"Btn\" style={{background:'black',opacity:'0.5'}}>←</button>\r\n        </div>\r\n        <div class='BtnColumn'>\r\n          <button class=\"Btn\" style={this.operationColorStyle}>%</button>\r\n          <button class=\"Btn\">2</button>\r\n          <button class=\"Btn\">5</button>\r\n          <button class=\"Btn\">8</button>\r\n          <button class=\"Btn\">0</button>\r\n        </div>\r\n        <div class='BtnColumn'>\r\n          <button class=\"Btn\" style={this.operationColorStyle}>/</button>\r\n          <button class=\"Btn\">3</button>\r\n          <button class=\"Btn\">6</button>\r\n          <button class=\"Btn\">9</button>\r\n          <button class=\"Btn\">.</button>\r\n        </div>\r\n        <div class='BtnColumn'>\r\n          <button class=\"Btn\" style={this.operationColorStyle}>*</button>\r\n          <button class=\"Btn\" style={this.operationColorStyle}>+</button>\r\n          <button class=\"Btn\" style={this.operationColorStyle}>-</button>\r\n          <button class=\"Btn BigEnter\">=</button>\r\n        </div>\r\n      </div>\r\n\r\n      // <div >\r\n      //   <div className='OperationTopBtn' >\r\n      //     <button className='Btn' onClick={emClear} style={{ borderRadius: '5rem', backgroundColor: 'white', color: 'red' }}>C</button>\r\n      //     <button className='Btn' onClick={emClick} value='%' style={this.operationColorStyle}>%</button>\r\n      //     <button className='Btn' onClick={emClick} value='/' style={this.operationColorStyle}>/</button>\r\n      //     <button className='Btn' onClick={emClick} value='*' style={this.operationColorStyle}>X</button>\r\n      //   </div>\r\n      //   <div className='SecondContainer' >\r\n      //     <div className='NumBtnDiv'>\r\n      //       <div className='NumBtnInColumn'>\r\n      //         <button className='Btn' onClick={emClick} value='1'>1</button>\r\n      //         <button className='Btn' onClick={emClick} value='2'>2</button>\r\n      //         <button className='Btn' onClick={emClick} value='3'>3</button>\r\n      //       </div>\r\n\r\n      //       <div className='NumBtnInColumn'>\r\n      //         <button className='Btn' onClick={emClick} value='4'>4</button>\r\n      //         <button className='Btn' onClick={emClick} value='5'>5</button>\r\n      //         <button className='Btn' onClick={emClick} value='6'>6</button>\r\n      //       </div>\r\n\r\n      //       <div className='NumBtnInColumn'>\r\n      //         <button className='Btn' onClick={emClick} value='7'>7</button>\r\n      //         <button className='Btn' onClick={emClick} value='8'>8</button>\r\n      //         <button className='Btn' onClick={emClick} value='9'>9</button>\r\n      //       </div>\r\n\r\n      //       <div className='NumBtnInColumn' >\r\n      //         <button onClick={emDelete} className='Btn' style={{ backgroundColor: 'rgb(52, 56, 106)' ,borderRadius:'5rem'}} >←</button>\r\n      //         <button onClick={emClick} className='Btn' value='0'>0</button>\r\n      //         <button onClick={emClick} className='Btn' value='.'>．</button>\r\n      //       </div>\r\n\r\n      //     </div>\r\n      //     <div className='OperationRigthBtn'>\r\n      //       <div className='OperationRigthBtnPM'>\r\n      //         <button className='Btn' onClick={emClick} value='+' style={this.operationColorStyle} >+</button>\r\n      //         <button className='Btn' onClick={emClick} value='-' style={this.operationColorStyle} >-</button>\r\n      //       </div>\r\n      //       <button className='BigEnter' onClick={emCalculate} >=</button>\r\n      //     </div>\r\n      //   </div>\r\n      //   </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default Buttons;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}